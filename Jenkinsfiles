pipeline{
    agent any
    
     tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonarqube'
        SONAR_TOKEN=credentials('sonar-token-camp')
    }

    stages{
        stage('git checkout'){
            steps{
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/rahul6364/yelp_camp.git'
            }
        }
        stage('install dependencies'){
            steps{
                sh 'npm install'
            }
        }
        stage('test case'){
            steps{
                sh 'npm test'
            }
        }
        stage('trivy fs scan'){
            steps{
                sh "trivy fs --format table -o trivy-report.txt ."
            }
        }
        stage('sonarqube scanner'){
            steps{
                withSonarQubeEnv('sonarqube') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=camp \
                        -Dsonar.projectName=camp \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.token=${SONAR_TOKEN}
                    '''
                } 
            }
        }

        stage('image build and tag'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker') {
                        sh "docker build -t rahul6364/yelp-camp:latest ."
                    }
                }
            }
        }

        stage('trivy image scan'){
            steps{
                sh "trivy image --format table -o trivy-report.txt rahul6364/yelp-camp:latest"
            }
        }
        stage('image run'){
            steps{
                script{
                    withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker') {
                        sh "docker run -d -p 3000:3000 rahul6364/yelp-camp:latest"
                    }
                }
            }
        }

    }
}
